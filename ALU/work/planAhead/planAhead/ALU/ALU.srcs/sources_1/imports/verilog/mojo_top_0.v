/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    input [4:0] io_button,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  localparam IDLE_state = 6'd0;
  localparam A1_state = 6'd1;
  localparam A2_state = 6'd2;
  localparam A3_state = 6'd3;
  localparam A4_state = 6'd4;
  localparam A5_state = 6'd5;
  localparam A6_state = 6'd6;
  localparam A7_state = 6'd7;
  localparam A8_state = 6'd8;
  localparam A9_state = 6'd9;
  localparam A10_state = 6'd10;
  localparam A11_state = 6'd11;
  localparam AEC_state = 6'd12;
  localparam AERR_state = 6'd13;
  localparam B1_state = 6'd14;
  localparam B2_state = 6'd15;
  localparam B3_state = 6'd16;
  localparam B4_state = 6'd17;
  localparam BEC_state = 6'd18;
  localparam BERR_state = 6'd19;
  localparam S1_state = 6'd20;
  localparam S2_state = 6'd21;
  localparam S3_state = 6'd22;
  localparam S4_state = 6'd23;
  localparam S5_state = 6'd24;
  localparam S6_state = 6'd25;
  localparam SEC_state = 6'd26;
  localparam SERR_state = 6'd27;
  localparam C1_state = 6'd28;
  localparam C2_state = 6'd29;
  localparam C3_state = 6'd30;
  localparam C4_state = 6'd31;
  localparam C5_state = 6'd32;
  localparam C6_state = 6'd33;
  localparam C7_state = 6'd34;
  localparam CEC_state = 6'd35;
  localparam CERR_state = 6'd36;
  
  reg [5:0] M_state_d, M_state_q = IDLE_state;
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  
  localparam X = 5'h1b;
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [15:0] alu;
  
  reg [5:0] alufn;
  
  wire [16-1:0] M_alumodule_alu;
  wire [1-1:0] M_alumodule_z;
  wire [1-1:0] M_alumodule_v;
  wire [1-1:0] M_alumodule_n;
  reg [16-1:0] M_alumodule_a;
  reg [16-1:0] M_alumodule_b;
  reg [6-1:0] M_alumodule_alufn;
  aluCompiled_3 alumodule (
    .a(M_alumodule_a),
    .b(M_alumodule_b),
    .alufn(M_alumodule_alufn),
    .alu(M_alumodule_alu),
    .z(M_alumodule_z),
    .v(M_alumodule_v),
    .n(M_alumodule_n)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_seg_values = 16'hffff;
    a = 16'h0000;
    b = 16'h0000;
    alufn = 16'h0000;
    M_alumodule_a = a;
    M_alumodule_b = b;
    M_alumodule_alufn = alufn;
    alu = M_alumodule_alu;
    io_led[16+7-:8] = 1'h0;
    io_led[8+7-:8] = 1'h0;
    io_led[0+7-:8] = 1'h0;
    
    case (M_state_q)
      IDLE_state: begin
        M_counter_d = 1'h0;
        M_seg_values = 16'hba5e;
        if (io_button[0+0-:1] == 1'h1) begin
          M_state_d = A1_state;
        end else begin
          if (io_button[4+0-:1] == 1'h1) begin
            M_state_d = B1_state;
          end else begin
            if (io_button[2+0-:1] == 1'h1) begin
              M_state_d = S1_state;
            end else begin
              if (io_button[3+0-:1] == 1'h1) begin
                M_state_d = C1_state;
              end
            end
          end
        end
      end
      A1_state: begin
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = 16'h000f;
        M_alumodule_b = 16'h0017;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h0f;
        io_led[8+7-:8] = 8'h19;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa01;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0026) begin
          M_state_d = A2_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0026) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A2_state: begin
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = 16'h0017;
        M_alumodule_b = 16'hfff1;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h17;
        io_led[8+7-:8] = 8'hf1;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa02;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0008) begin
          M_state_d = A3_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0008) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A3_state: begin
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = 16'h000f;
        M_alumodule_b = 16'hffe9;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h0f;
        io_led[8+7-:8] = 8'he9;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa03;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'hfff8) begin
          M_state_d = A4_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'hfff8) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A4_state: begin
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = 16'hfff1;
        M_alumodule_b = 16'hffe9;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hf1;
        io_led[8+7-:8] = 8'he9;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa04;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'hffda) begin
          M_state_d = A5_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'hffda) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A5_state: begin
        M_alumodule_alufn = 6'h01;
        M_alumodule_a = 16'hfff1;
        M_alumodule_b = 16'hffe9;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hf1;
        io_led[8+7-:8] = 8'he9;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa05;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0008) begin
          M_state_d = A6_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0008) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A6_state: begin
        M_alumodule_alufn = 6'h02;
        M_alumodule_a = 16'h0007;
        M_alumodule_b = 16'h0005;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h07;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa06;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0023) begin
          M_state_d = A7_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0023) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A7_state: begin
        M_alumodule_alufn = 6'h03;
        M_alumodule_a = 16'h0008;
        M_alumodule_b = 16'h0003;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h08;
        io_led[8+7-:8] = 8'h03;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa07;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0002) begin
          M_state_d = A8_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0002) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A8_state: begin
        M_alumodule_alufn = 6'h02;
        M_alumodule_a = 16'hfff9;
        M_alumodule_b = 16'h0005;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hf9;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa08;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'hffdd) begin
          M_state_d = A9_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'hffdd) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A9_state: begin
        M_alumodule_alufn = 6'h02;
        M_alumodule_a = 16'hfff9;
        M_alumodule_b = 16'hfffb;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hf9;
        io_led[8+7-:8] = 8'hfb;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa09;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0023) begin
          M_state_d = A10_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0023) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A10_state: begin
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = 16'h7fff;
        M_alumodule_b = 16'h0002;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hff;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa10;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h8001 && M_alumodule_v == 1'h1) begin
          M_state_d = A11_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h8001 && M_alumodule_v != 1'h1) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      A11_state: begin
        M_alumodule_alufn = 6'h01;
        M_alumodule_a = 16'h8001;
        M_alumodule_b = 16'h0004;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hff;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfa11;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h7ffd && M_alumodule_v == 1'h1) begin
          M_state_d = AEC_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h7ffd && M_alumodule_v != 1'h1) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      AEC_state: begin
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = 16'h000f;
        M_alumodule_b = 16'h0017;
        alu = M_alumodule_alu + 1'h1;
        io_led[16+7-:8] = 8'h0f;
        io_led[8+7-:8] = 8'h17;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfaec;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0026) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0026) begin
            M_state_d = AERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      AERR_state: begin
        M_seg_values = 16'haedd;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end
      end
      B1_state: begin
        M_alumodule_alufn = 6'h18;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0017;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h17;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfb01;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0011) begin
          M_state_d = B2_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0011) begin
            M_state_d = BERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      B2_state: begin
        M_alumodule_alufn = 6'h1e;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0017;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h17;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfb02;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0017) begin
          M_state_d = B3_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0017) begin
            M_state_d = BERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      B3_state: begin
        M_alumodule_alufn = 6'h16;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0017;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h17;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfb03;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0006) begin
          M_state_d = B4_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0006) begin
            M_state_d = BERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      B4_state: begin
        M_alumodule_alufn = 6'h1a;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0017;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h17;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfb04;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0011) begin
          M_state_d = BEC_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0011) begin
            M_state_d = BERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      BEC_state: begin
        M_alumodule_alufn = 6'h18;
        M_alumodule_a = 16'h0010;
        M_alumodule_b = 16'h0017;
        alu = M_alumodule_alu + 1'h1;
        io_led[16+7-:8] = 8'h10;
        io_led[8+7-:8] = 8'h17;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfbec;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0010) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0010) begin
            M_state_d = BERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      BERR_state: begin
        M_seg_values = 16'hbedd;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end
      end
      S1_state: begin
        M_alumodule_alufn = 6'h20;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0002;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hf501;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0044) begin
          M_state_d = S2_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0044) begin
            M_state_d = SERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      S2_state: begin
        M_alumodule_alufn = 6'h20;
        M_alumodule_a = 16'hffef;
        M_alumodule_b = 16'h0002;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hef;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hf502;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'hffbc) begin
          M_state_d = S3_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'hffbc) begin
            M_state_d = SERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      S3_state: begin
        M_alumodule_alufn = 6'h21;
        M_alumodule_a = 16'h0017;
        M_alumodule_b = 16'h0005;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h17;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hf503;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0000) begin
          M_state_d = S4_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0000) begin
            M_state_d = SERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      S4_state: begin
        M_alumodule_alufn = 6'h21;
        M_alumodule_a = 16'hffe9;
        M_alumodule_b = 16'h0005;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'he9;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hf504;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h07ff) begin
          M_state_d = S5_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h07ff) begin
            M_state_d = SERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      S5_state: begin
        M_alumodule_alufn = 6'h23;
        M_alumodule_a = 16'h004e;
        M_alumodule_b = 16'h0005;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h4e;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hf505;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0002) begin
          M_state_d = S6_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0002) begin
            M_state_d = SERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      S6_state: begin
        M_alumodule_alufn = 6'h23;
        M_alumodule_a = 16'hffb2;
        M_alumodule_b = 16'h0005;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'hb2;
        io_led[8+7-:8] = 8'h05;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hf506;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'hfffd) begin
          M_state_d = SEC_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'hfffd) begin
            M_state_d = SERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      SEC_state: begin
        M_alumodule_alufn = 6'h20;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0002;
        alu = M_alumodule_alu + 1'h1;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hf5ec;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0044) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0044) begin
            M_state_d = SERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      SERR_state: begin
        M_seg_values = 16'h5edd;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end
      end
      C1_state: begin
        M_alumodule_alufn = 6'h33;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0011;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h11;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfc01;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0001) begin
          M_state_d = C2_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0001) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      C2_state: begin
        M_alumodule_alufn = 6'h33;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0012;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h12;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfc02;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0000) begin
          M_state_d = C3_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0000) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      C3_state: begin
        M_alumodule_alufn = 6'h35;
        M_alumodule_a = 16'h0011;
        M_alumodule_b = 16'h0012;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h11;
        io_led[8+7-:8] = 8'h12;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfc03;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0001) begin
          M_state_d = C4_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0001) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      C4_state: begin
        M_alumodule_alufn = 6'h35;
        M_alumodule_a = 16'h0013;
        M_alumodule_b = 16'h0012;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h13;
        io_led[8+7-:8] = 8'h12;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfc04;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0000) begin
          M_state_d = C5_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0000) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      C5_state: begin
        M_alumodule_alufn = 6'h37;
        M_alumodule_a = 16'h0013;
        M_alumodule_b = 16'h0014;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h13;
        io_led[8+7-:8] = 8'h14;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfc05;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0001) begin
          M_state_d = C6_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0001) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      C6_state: begin
        M_alumodule_alufn = 6'h37;
        M_alumodule_a = 16'h0014;
        M_alumodule_b = 16'h0014;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h14;
        io_led[8+7-:8] = 8'h14;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfc06;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0001) begin
          M_state_d = C7_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0001) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      C7_state: begin
        M_alumodule_alufn = 6'h37;
        M_alumodule_a = 16'h0015;
        M_alumodule_b = 16'h0014;
        alu = M_alumodule_alu;
        io_led[16+7-:8] = 8'h15;
        io_led[8+7-:8] = 8'h14;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfc07;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0000) begin
          M_state_d = CEC_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0000) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      CEC_state: begin
        M_alumodule_alufn = 6'h33;
        M_alumodule_a = 16'h0012;
        M_alumodule_b = 16'h0012;
        alu = M_alumodule_alu + 1'h1;
        io_led[16+7-:8] = 8'h12;
        io_led[8+7-:8] = 8'h12;
        io_led[0+7-:8] = alu;
        M_seg_values = 16'hfcec;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1 && alu == 16'h0001) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end else begin
          if (M_counter_q[27+0-:1] == 1'h1 && alu != 16'h0001) begin
            M_state_d = CERR_state;
            M_counter_d = 1'h0;
          end
        end
      end
      CERR_state: begin
        M_seg_values = 16'hcedd;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_state_d = IDLE_state;
          M_counter_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
